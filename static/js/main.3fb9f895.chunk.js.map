{"version":3,"sources":["lib/index.js","App.tsx","serviceWorker.js","index.tsx"],"names":["ScrollingSyncerContext","React","createContext","registerNode","_node","_group","unregisterNode","onScroll","_e","_groups","ScrollSync","props","nodes","useRef","current","shouldPaintFrame","findGroup","group","syncScrollPositions","scrolledNode","groups","forEach","node","percentage","scrollTop","scrollHeight","offsetHeight","Math","round","syncScrollPosition","createElement","Provider","value","push","foundNode","find","n","findNode","splice","indexOf","e","window","requestAnimationFrame","handleNodeScroll","currentTarget","Children","only","children","defaultProps","enabled","toArray","concat","ScrollSyncNode","_a","_b","_c","useContext","ref","useEffect","cloneElement","App","style","display","position","height","overflow","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fb9f895.chunk.js","sourcesContent":["/* eslint-disable */\nimport React, { useRef, useContext, useEffect } from 'react';\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/**\r\n * ScrollingSyncerContext is the context to be handling scrolled nodes\r\n */\r\nvar ScrollingSyncerContext = React.createContext({\r\n    registerNode: function (_node, _group) { },\r\n    unregisterNode: function (_node, _group) { },\r\n    onScroll: function (_e, _groups) { },\r\n});\r\n/**\r\n * ScrollSync component is a context based component,\r\n * that wrappes children to be .Provided with context utils and eventsHandlers\r\n * @param props ScrollSyncProps\r\n */\r\nvar ScrollSync = function (props) {\r\n    /**\r\n     * a map of group: and it's nodes\r\n     * {\r\n     *  groupA: [node1, node2, node3],\r\n     *  groupB: [node4, node5],\r\n     *  groupC: [node1, node4],\r\n     * }\r\n     */\r\n    var nodesRef = useRef({});\r\n    var nodes = nodesRef.current;\r\n    /**\r\n     * A simple trick to avoid calling `requestAnimationFrame` before the frame is painted, to enhance performance!\r\n     */\r\n    var shouldPaintFrameRef = useRef(true);\r\n    var shouldPaintFrame = shouldPaintFrameRef.current;\r\n    /**\r\n     * return boolean if the group exists\r\n     * @param group to be found\r\n     */\r\n    var findGroup = function (group) {\r\n        return !!nodes[group];\r\n    };\r\n    /**\r\n     * returns found node or undefined\r\n     * @param node to be found\r\n     * @param group to be searched in\r\n     */\r\n    var findNode = function (node, group) {\r\n        var groupExists = findGroup(group);\r\n        if (!groupExists)\r\n            return false;\r\n        var foundNode = nodes[group].find(function (n) { return n === node; });\r\n        if (!foundNode)\r\n            return false;\r\n        return foundNode;\r\n    };\r\n    /**\r\n     * this function will delightly register your node (that uses ScrollSyncNode)\r\n     * to be scroll-synced with it's cool other registerd nodes\r\n     *\r\n     * @param node to be registred\r\n     * @param groups to wich groups the node should be registered\r\n     */\r\n    var registerNode = function (node, groups) {\r\n        groups.forEach(function (group) {\r\n            var groupExists = findGroup(group);\r\n            if (!groupExists) {\r\n                nodes[group] = [];\r\n            }\r\n            nodes[group].push(node);\r\n        });\r\n    };\r\n    /**\r\n     * this function will delightly UNregister your node (that uses ScrollSyncNode)\r\n     * to stop it's scroll-sync with other cool registerd nodes\r\n     *\r\n     * used now when unmounting nodes\r\n     *\r\n     * @param node to be registred\r\n     * @param groups to wich groups the node should be registered\r\n     */\r\n    var unregisterNode = function (node, groups) {\r\n        groups.forEach(function (group) {\r\n            var foundNode = findNode(node, group);\r\n            if (foundNode) {\r\n                nodes[group].splice(nodes[group].indexOf(node), 1);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * calculate scrolling percentage of the scrolledNode to be synced with other nodes\r\n     * @param scrolledNode !!\r\n     * @param node other node to be scroll-synced\r\n     */\r\n    var syncScrollPosition = function (scrolledNode, node) {\r\n        var scrollTop = scrolledNode.scrollTop, scrollHeight = scrolledNode.scrollHeight, offsetHeight = scrolledNode.offsetHeight;\r\n        //calculate percentage of scrolling of the scrolledNode\r\n        var percentage = scrollTop / (scrollHeight - offsetHeight);\r\n        //Apply calculated scrolling\r\n        node.scrollTop = Math.round(percentage * (node.scrollHeight - node.offsetHeight));\r\n    };\r\n    /**\r\n     * We sync all other nodes in the registered groups\r\n     * @param scrolledNode !!\r\n     * @param groups groups to be scroll-synced\r\n     */\r\n    var syncScrollPositions = function (scrolledNode, groups) {\r\n        groups.forEach(function (group) {\r\n            nodes[group].forEach(function (node) {\r\n                /* For all nodes other than the currently scrolled one */\r\n                if (scrolledNode !== node) {\r\n                    syncScrollPosition(scrolledNode, node);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * check if previous frame was painted and we should paint next\r\n     * if we should, then we call `requestAnimationFrame` again\r\n     * and then clear the shouldPaintFrame flag till next animation frame\r\n     *\r\n     * @param node node to be scrolled\r\n     * @param groups groups to be scroll-synced\r\n     */\r\n    var handleNodeScroll = function (node, groups) {\r\n        if (shouldPaintFrame) {\r\n            window.requestAnimationFrame(function () {\r\n                syncScrollPositions(node, groups);\r\n                shouldPaintFrame = true;\r\n            });\r\n            shouldPaintFrame = false;\r\n        }\r\n    };\r\n    return (React.createElement(ScrollingSyncerContext.Provider, { value: {\r\n            registerNode: registerNode,\r\n            unregisterNode: unregisterNode,\r\n            onScroll: function (e, groups) { return handleNodeScroll(e.currentTarget, groups); },\r\n        } }, React.Children.only(props.children)));\r\n};\r\nScrollSync.defaultProps = {\r\n    enabled: true,\r\n};\n\n/* eslint react/no-find-dom-node: 0 */\r\nvar toArray = function (groups) { return [].concat(groups); };\r\nvar ScrollSyncNode = function (_a) {\r\n    var children = _a.children, _b = _a.group, group = _b === void 0 ? \"default\" : _b;\r\n    var _c = useContext(ScrollingSyncerContext), registerNode = _c.registerNode, unregisterNode = _c.unregisterNode, onScroll = _c.onScroll;\r\n    var ref = useRef(null);\r\n    useEffect(function () {\r\n        registerNode(ref.current, toArray(group));\r\n        return function () { return unregisterNode(ref.current, toArray(group)); };\r\n    }, []);\r\n    return React.cloneElement(children, {\r\n        ref: ref,\r\n        onScroll: function (e) { return onScroll(e, toArray(group)); },\r\n    });\r\n};\r\nScrollSyncNode.defaultProps = {\r\n    group: \"default\",\r\n    enabled: true,\r\n};\n\nexport { ScrollSync, ScrollSyncNode };\n","import React, { Component } from 'react';\n\nimport { ScrollSync, ScrollSyncNode } from './lib';\n\nclass App extends Component {\n  render() {\n    return (\n      <ScrollSync>\n        <div style={{ display: 'flex', position: 'relative', height: 300 }}>\n          <ScrollSyncNode group=\"a\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `a`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n\n          <ScrollSyncNode group=\"a\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `a`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n\n          <ScrollSyncNode group=\"a\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `a`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode group=\"b\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `b`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode group=\"b\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `b`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode>\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is no group</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode>\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is no group</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode>\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is no group</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode>\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is no group</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode group=\"b\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `b`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode group=\"b\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `b`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode group=\"a\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `a`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode group=\"a\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `a`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n          <ScrollSyncNode group=\"a\">\n            <div style={{ overflow: 'auto' }}>\n              <section style={{ height: 1000 }}>\n                <h1>This is group `a`</h1>\n                <p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab aperiam doloribus dolorum est eum eveniet\n                  exercitationem iste labore minus, neque nobis odit officiis omnis possimus quasi rerum sed soluta\n                  veritatis.\n                </p>\n              </section>\n            </div>\n          </ScrollSyncNode>\n        </div>\n      </ScrollSync>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}